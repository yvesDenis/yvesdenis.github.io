<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pulumi on Time-to-Geek</title><link>https://yvesdenis.github.io/tags/pulumi/</link><description>Recent content in Pulumi on Time-to-Geek</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 15 Jan 2023 12:16:46 -0500</lastBuildDate><atom:link href="https://yvesdenis.github.io/tags/pulumi/index.xml" rel="self" type="application/rss+xml"/><item><title>Build serverless system with Pulumi and AWS (Part 2)</title><link>https://yvesdenis.github.io/post/build-serverless-system-part-2-post/</link><pubDate>Sun, 15 Jan 2023 12:16:46 -0500</pubDate><guid>https://yvesdenis.github.io/post/build-serverless-system-part-2-post/</guid><description>Introduction In our previous article, we focused on the lambda-Sync part of our serverless system which corresponds to the synchronous part of our application.
We had already set up our entire continuous integration pipeline consisting of Github for the VCS, Codebuild to build our docker images and finally Cloudformation to deploy our resources in the AWS environment.
For this second part, there is no need to reinvent the wheel. We will use the instruments already in place and implement our asynchronous circuit.</description></item><item><title>Build serverless system with Pulumi and AWS (Part 1)</title><link>https://yvesdenis.github.io/post/build-serverless-system-part-1-post/</link><pubDate>Mon, 02 Jan 2023 08:13:08 -0400</pubDate><guid>https://yvesdenis.github.io/post/build-serverless-system-part-1-post/</guid><description>Introduction In my journey in the cloud and in the preparation of cloud certifications, I have been inspired by the AWS workshops carried out and generously made available to everyone by the AWS team.
This workshop which deals with the implementation of a serverless system is a must for all aspiring cloud engineers. It covers both the event-driven approach and the synchronous web-server mechanism.
In this post, we are working to resume the basic concept but bringing a DevOps concept with a pipeline to automate our deployments and also adding a front-end part also deployed in an automated way in the cloud.</description></item></channel></rss>